// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int    @id @default(autoincrement())
  email        String @unique
  name         String
  passwordHash String

  avatarUrl      String
  description    String              @default("")
  knownLanguages UserKnownLanguage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups               GroupMembers[]
  participatedProjects ProjectParticipant[]
  recentProjects       UserRecentProject[]

  notifications Notification[]
}

model UserRecentProject {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  updatedAt DateTime @updatedAt

  @@id([userId, projectId])
}

model UserKnownLanguage {
  id          BigInt @id @default(autoincrement())
  user        User   @relation(fields: [userId], references: [id])
  userId      Int
  language    String
  mastery     Float
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, language])
}

model Group {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users        GroupMembers[]
  userCount    Int            @default(0)
  projects     Project[]
  projectCount Int            @default(0)
}

enum GroupRole {
  OWNER
  ADMIN
  MEMBER
  OBSERVER
}

model GroupMembers {
  group     Group     @relation(fields: [groupId], references: [id])
  groupId   Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      GroupRole

  @@id([groupId, userId])
}

model Project {
  id             Int     @id @default(autoincrement())
  group          Group   @relation(fields: [groupId], references: [id])
  groupId        Int
  name           String
  privateProject Boolean @default(false)
  description    String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectParticipants ProjectParticipant[]
  recentVisitors      UserRecentProject[]
}

model ProjectParticipant {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        BigInt   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String
  content   String
  data      Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
